identifier = @{ 'a'..'z' ~ ( 'a'..'z' | "_" | ASCII_DIGIT)* }

dec_literal = @{ ASCII_DIGIT+ }
hex_literal = @{ "0x" ~ ASCII_HEX_DIGIT+ }
bin_literal = @{ "0b" ~ ASCII_BIN_DIGIT+ }
numeric_literal = { ("-")? ~ (dec_literal | hex_literal | bin_literal) }
string_literal = { "'" ~ (ASCII_ALPHANUMERIC | " ")* ~ "'" }

PAD = _{ " " }
PADDING = _{ PAD* }
RPADDING = _{ PAD+ }

STATEMENT_TERM = _{ PADDING ~ ";" }

operand_call_arg = { identifier | numeric_literal }
operand_call = { PAD* ~ identifier ~ (operand_call_arg | PAD)*  }

variable_scope_keyword = { "local" | "global" }
variable_declaration = {
    PADDING ~ variable_scope_keyword ~ RPADDING ~ identifier ~ (PADDING ~ eq ~ PADDING ~ expression)?
}

variable_change = {
    PADDING ~ identifier ~ PADDING ~ change_op ~ PADDING ~ expression
}

param_declaration = { PADDING ~ "param" ~ PAD+ ~ identifier }

nregister = { "register" }
sregister = { "sregister" }
pregister = { "pregister" }

register_kind_id = { nregister | sregister | pregister }

any_register_declaration = { PADDING ~ register_kind_id ~ PADDING ~ identifier }

eq  = @{ "=" }
add = @{ "+" }
sub = @{ "-" }
mul = @{ "*" }
div = @{ "/" }
modulus = @{ "%" }
pow = @{ "^" }

addeq = @{ "+=" }
subeq = @{ "-=" }
muleq = @{ "*=" }
diveq = @{ "/=" }
poweq = @{ "^=" }
modeq = @{ "%=" }

m_op = { add | sub | mul | div | modulus | pow }

change_op = { eq | addeq | subeq | muleq | diveq | poweq | modeq }

expression = { PADDING ~ term ~ PADDING ~ (m_op ~ PADDING ~ term)* }
term = {
    PADDING ~ numeric_literal ~ PADDING |
    PADDING ~ identifier ~ PADDING |
    PADDING ~ "(" ~ PADDING ~ expression ~ PADDING ~ ")" ~ PADDING }

statement = {
    (any_register_declaration |
    param_declaration |
    variable_declaration |
    variable_change |
    operand_call) ~
    STATEMENT_TERM
}

file = {
    SOI ~
    PADDING ~
    statement* ~
    PADDING ~
    EOI
}
